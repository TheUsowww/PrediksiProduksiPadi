# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PDWc_Hx7E10ipexmuZIe6GTOOFV-R-OQ
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import gradio as gr

# Import dataset
dataset = 'https://raw.githubusercontent.com/TheUsowww/DatasetPadi/main/Data%20Tanaman%20Padi%20Sumatera.csv'
df = pd.read_csv(dataset, sep=';')

# Convert 'Tahun' ke datetime
df['Tahun'] = pd.to_datetime(df['Tahun'], format='%Y')

# Sort dataframe berdasarkan 'Provinsi' dan 'Tahun'
df = df.sort_values(['Provinsi', 'Tahun'])

#lag features
for lag in range(1, 4):  # membuat 3 lag features
    df[f'Produksi_lag_{lag}'] = df.groupby('Provinsi')['Produksi'].shift(lag)
    df[f'Luas_Panen_lag_{lag}'] = df.groupby('Provinsi')['Luas Panen'].shift(lag)

# Drop NaN rows (3 tahun pertama dalam provinsi)
df = df.dropna()

# Mempersiapkan fitur dan target
features = ['Luas Panen', 'Produksi_lag_1', 'Produksi_lag_2', 'Produksi_lag_3', 'Luas_Panen_lag_1', 'Luas_Panen_lag_2', 'Luas_Panen_lag_3']
target = 'Produksi'

X = df[features]
y = df[target]

# Split data train/tes (80:20)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# scaling fitur
scaler = StandardScaler()
X_train_scaled = pd.DataFrame(scaler.fit_transform(X_train), columns=features)
X_test_scaled = pd.DataFrame(scaler.transform(X_test), columns=features)

# Train Gradient Boosting model
gb_model = GradientBoostingRegressor(random_state=42)
gb_model.fit(X_train_scaled, y_train)

# Menghitung performa model
y_pred = gb_model.predict(X_test_scaled)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
r2 = r2_score(y_test, y_pred)

# Fungsi untuk prediksi dan menghitung performa model
def predict_production(luas_panen, produksi_1, produksi_2, produksi_3, luas_panen_1, luas_panen_2, luas_panen_3):
    input_data = np.array([luas_panen, produksi_1, produksi_2, produksi_3, luas_panen_1, luas_panen_2, luas_panen_3]).reshape(1, -1)
    input_scaled = scaler.transform(input_data)
    prediction = gb_model.predict(input_scaled)[0]

    performance = f"""
    Metriks Kinerja Model:
    Mean Absolute Error (MAE): {mae:.2f}
    Root Mean Square Error (RMSE): {rmse:.2f}
    Mean Absolute Percentage Error (MAPE): {mape:.2f}%
    R-squared (R2) Score: {r2:.2f}
    """

    return f"Prediksi Produksi: {prediction:.2f}", performance

# Membuat interface Gradio
iface = gr.Interface(
    fn=predict_production,
    inputs=[
        gr.Number(label="Luas Panen Tahun Ini (hektar)"),
        gr.Number(label="Luas Panen 1 Tahun Lalu (hektar)"),
        gr.Number(label="Luas Panen 2 Tahun Lalu (hektar)"),
        gr.Number(label="Luas Panen 3 Tahun Lalu (hektar)"),
        gr.Number(label="Produksi 1 Tahun Lalu (ton)"),
        gr.Number(label="Produksi 2 Tahun Lalu (ton)"),
        gr.Number(label="Produksi 3 Tahun Lalu (ton)"),
    ],
    outputs=[
        gr.Textbox(label="Hasil Prediksi"),
        gr.Textbox(label="Kinerja Model")
    ],
    title="Prediksi Produksi Padi Tahun Depan",
    description="Masukkan data produksi dan luas panen untuk memprediksi produksi padi."
)

if __name__ == "__main__":
# Launch the interface
iface.launch()