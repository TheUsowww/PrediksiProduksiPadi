# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zPfTnkB740Rq05AvcQ9mVSHhcfv9zPeb
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import gradio as gr

# Load and preprocess data
dataset = 'https://raw.githubusercontent.com/TheUsowww/DatasetPadi/main/Data%20Tanaman%20Padi%20Sumatera.csv'
df = pd.read_csv(dataset, sep=';')
df['Tahun'] = pd.to_datetime(df['Tahun'], format='%Y')
df = df.sort_values(['Provinsi', 'Tahun'])

for lag in range(1, 4):
    df[f'Produksi_lag_{lag}'] = df.groupby('Provinsi')['Produksi'].shift(lag)
df = df.dropna()

features = ['Luas Panen', 'Curah hujan', 'Kelembapan', 'Suhu rata-rata',
            'Produksi_lag_1', 'Produksi_lag_2', 'Produksi_lag_3']
X = df[features]
y = df['Produksi']

# Split data and scale features
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train model
gb_model = GradientBoostingRegressor(random_state=42)
gb_model.fit(X_train_scaled, y_train)

# Calculate metrics
y_pred = gb_model.predict(X_test_scaled)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

def predict_production(luas_panen, curah_hujan, kelembapan, suhu_rata_rata,
                       produksi_lag_1, produksi_lag_2, produksi_lag_3):
    input_data = np.array([[luas_panen, curah_hujan, kelembapan, suhu_rata_rata,
                            produksi_lag_1, produksi_lag_2, produksi_lag_3]])
    input_scaled = scaler.transform(input_data)
    prediction = gb_model.predict(input_scaled)[0]

    output = f"Hasil Prediksi Produksi: {prediction:.2f} ton\n\n"
    output += f"Keterangan Kinerja Model:\n"
    output += f"Rata-rata Kesalahan Absolut (MAE): {mae:.2f} ton\n"
    output += f"Akurasi Prediksi (R2): {r2*100:.2f}%\n"
    output += f"Model dapat menjelaskan sekitar {r2*100:.2f}% variasi dalam data produksi padi."

    return output

iface = gr.Interface(
    fn=predict_production,
    inputs=[
        gr.Number(label="Luas Panen (hektar)"),
        gr.Number(label="Curah Hujan (mm)"),
        gr.Number(label="Kelembapan (%)"),
        gr.Number(label="Suhu Rata-rata (Â°C)"),
        gr.Number(label="Produksi 1 Tahun Lalu (ton)"),
        gr.Number(label="Produksi 2 Tahun Lalu (ton)"),
        gr.Number(label="Produksi 3 Tahun Lalu (ton)")
    ],
    outputs=gr.Textbox(label="Hasil Prediksi dan Kinerja Model"),
    title="Prediksi Produksi Padi",
    description="""
    Masukkan fitur-fitur untuk memprediksi produksi padi tahun depan.
    <br><br>
    <a href="https://docs.google.com/spreadsheets/d/e/2PACX-1vSpoJpc0n4LF_X2OW32IncZsCS4us_tlp1ylbw_1iJ9T1nySFipbSHyUGR5v4or_ZGOcwhLHROjDgll/pubhtml?gid=0&single=true" target="_blank">Info Input Prediksi Produksi Padi</a>
    """
)

if __name__ == "__main__":
    iface.launch()